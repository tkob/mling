#!/usr/bin/env python
from __future__ import print_function
from optparse import OptionParser
import sys, os.path

from clang.cindex import Index
from clang.cindex import Config
from clang.cindex import TypeKind
from clang.cindex import CursorKind

class UnsupportedException(Exception):
    def __init__(self, doc, message):
        self.__doc__ = doc
        self.message = message
        pass

class MLtonStrategy:
    ty_dict = {
            "VOID": "unit",
            "CHAR_S": "Int8.int",
            "INT": "Int32.int",
            "SHORT": "Int16.int",
            "LONG": "Int64.int",
            "LONGLONG": "Int64.int",
            "UINT": "Word32.word",
            "USHORT": "Word16.word",
            "ULONG": "Word64.word",
            "ULONGLONG": "Word64.word",
            "DOUBLE": "Real64.real",
            "BOOL": "bool",
            "ENUM": "int",
            "POINTER": "MLton.Pointer.t"
            }

    def __init__(self, prefix):
        self.vals = []
        self.prefix = prefix

    def map_ty(self, ty):
        if ty.kind == TypeKind.POINTER:
            if ty.get_pointee().kind == TypeKind.CHAR_S:
                return "string"
            else:
                return "MLton.Pointer.t"
        elif ty.kind == TypeKind.TYPEDEF:
            canonical = ty.get_canonical()
            return self.map_ty(canonical)
        elif ty.kind == TypeKind.UNEXPOSED:
            raise UnsupportedException("unexposed type", ty.kind.name)
        else:
            return MLtonStrategy.ty_dict[ty.kind.name]

    def process_decl(self, decl):
        if decl.kind.name == "FUNCTION_DECL":
            n = decl.spelling
            if n.startswith("_"):
                print("unrendered: "+n, file=sys.stderr)
                return
            args_ty = [a.type for a in decl.get_arguments()]
            result_ty = decl.result_type
            try:
                if len(args_ty) == 0:
                    args_str = "unit"
                else:
                    args_str = "(" + " * ".join([self.map_ty(a) for a in args_ty]) + ")"
                result_str = self.map_ty(result_ty)
                self.vals.append("val %s = _import \"%s\" public: %s -> %s;" % (n, n, args_str, result_str))
            except Exception, e:
                print("unrendered: "+n+" "+e.__doc__+" "+e.message, file=sys.stderr)

    def process_tu(self, tu):
        for decl in tu.get_children():
            self.process_decl(decl)

    def spell_out(self):
      print("structure %s = struct" % self.prefix)
      print("  val NULL = MLton.Pointer.null")
      for val in self.vals:
          print("  " + val)
      print("end")

def make_strategy(sml, prefix):
    if sml == "mlton":
        return MLtonStrategy(prefix)
    else:
        raise ValueError("Unknown SML implementation: %s" % sml)

def parse_opts():
    usage = "usage: %prog [options] file [clang-options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-p", "--prefix", dest="prefix", help="use PREFIX as the structure name")
    parser.add_option("-s", "--sml", dest="sml", default="mlton", help="sml implementation [mlton|poly]")
    (options, args) = parser.parse_args()

    if len(args) < 1:
        parser.error("incorrect number of arguments")
    file = args[0]
    clang_opts = args[1:]

    if options.prefix == None:
        basename = os.path.basename(file)
        (name, ext) = os.path.splitext(basename)
        options.prefix = name.title()

    return (file, options, args, clang_opts)

(file, options, args, clang_opts) = parse_opts()

index = Index.create()
tu = index.parse(file, args=clang_opts)

strategy = make_strategy(options.sml, options.prefix)
strategy.process_tu(tu.cursor)
strategy.spell_out()
